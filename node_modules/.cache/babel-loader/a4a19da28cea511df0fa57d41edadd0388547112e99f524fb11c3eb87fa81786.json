{"ast":null,"code":"// import React, { useState } from 'react';\n// import { Form, Input, InputNumber, Popconfirm, Table, Typography } from 'antd';\n// const originData = [];\n// for (let i = 0; i < 10; i++) {\n//   originData.push({\n//     key: i.toString(),\n//     name: `Edward ${i}`,\n//     age: 32,\n//     address: `London Park no. ${i}`,\n//   });\n// }\n// const EditableCell = ({\n//   editing,\n//   dataIndex,\n//   title,\n//   inputType,\n//   record,\n//   index,\n//   children,\n//   ...restProps\n// }) => {\n//   const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n//   return (\n//     <td {...restProps}>\n//       {editing ? (\n//         <Form.Item\n//           name={dataIndex}\n//           style={{\n//             margin: 0,\n//           }}\n//           rules={[\n//             {\n//               required: true,\n//               message: `Please Input ${title}!`,\n//             },\n//           ]}\n//         >\n//           {inputNode}\n//         </Form.Item>\n//       ) : (\n//         children\n//       )}\n//     </td>\n//   );\n// };\n// const EditTable = () => {\n//   const [form] = Form.useForm();\n//   const [data, setData] = useState(originData);\n//   const [editingKey, setEditingKey] = useState('');\n//   const isEditing = (record) => record.key === editingKey;\n//   const edit = (record) => {\n//     form.setFieldsValue({\n//       name: '',\n//       age: '',\n//       address: '',\n//       ...record,\n//     });\n//     setEditingKey(record.key);\n//   };\n//   const cancel = () => {\n//     setEditingKey('');\n//   };\n//   const save = async (key) => {\n//     try {\n//       const row = await form.validateFields();\n//       const newData = [...data];\n//       const index = newData.findIndex((item) => key === item.key);\n//       if (index > -1) {\n//         const item = newData[index];\n//         newData.splice(index, 1, {\n//           ...item,\n//           ...row,\n//         });\n//         setData(newData);\n//         setEditingKey('');\n//       } else {\n//         newData.push(row);\n//         setData(newData);\n//         setEditingKey('');\n//       }\n//     } catch (errInfo) {\n//       console.log('Validate Failed:', errInfo);\n//     }\n//   };\n//   const columns = [\n//     {\n//       title: 'name',\n//       dataIndex: 'name',\n//       width: '25%',\n//       editable: true,\n//     },\n//     {\n//       title: 'age',\n//       dataIndex: 'age',\n//       width: '15%',\n//       editable: true,\n//     },\n//     {\n//       title: 'address',\n//       dataIndex: 'address',\n//       width: '40%',\n//       editable: true,\n//     },\n//     {\n//       title: 'operation',\n//       dataIndex: 'operation',\n//       render: (_, record) => {\n//         const editable = isEditing(record);\n//         return editable ? (\n//           <span>\n//             <Typography.Link\n//               onClick={() => save(record.key)}\n//               style={{\n//                 marginRight: 8,\n//               }}\n//             >\n//               Save\n//             </Typography.Link>\n//             <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n//               <a>Cancel</a>\n//             </Popconfirm>\n//           </span>\n//         ) : (\n//           <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>\n//             Edit\n//           </Typography.Link>\n//         );\n//       },\n//     },\n//   ];\n//   const mergedColumns = columns.map((col) => {\n//     if (!col.editable) {\n//       return col;\n//     }\n//     return {\n//       ...col,\n//       onCell: (record) => ({\n//         record,\n//         inputType: col.dataIndex === 'age' ? 'number' : 'text',\n//         dataIndex: col.dataIndex,\n//         title: col.title,\n//         editing: isEditing(record),\n//       }),\n//     };\n//   });\n//   return (\n//     <Form form={form} component={false}>\n//       <Table\n//         components={{\n//           body: {\n//             cell: EditableCell,\n//           },\n//         }}\n//         bordered\n//         dataSource={data}\n//         columns={mergedColumns}\n//         rowClassName=\"editable-row\"\n//         pagination={{\n//           onChange: cancel,\n//         }}\n//       />\n//     </Form>\n//   );\n// };\n// export default EditTable;","map":{"version":3,"names":[],"sources":["C:/Users/Muhammad Owais/Desktop/React-Tutuorial/test-project/StudentCrud/src/Component/EditTable.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Form, Input, InputNumber, Popconfirm, Table, Typography } from 'antd';\r\n// const originData = [];\r\n// for (let i = 0; i < 10; i++) {\r\n//   originData.push({\r\n//     key: i.toString(),\r\n//     name: `Edward ${i}`,\r\n//     age: 32,\r\n//     address: `London Park no. ${i}`,\r\n//   });\r\n// }\r\n// const EditableCell = ({\r\n//   editing,\r\n//   dataIndex,\r\n//   title,\r\n//   inputType,\r\n//   record,\r\n//   index,\r\n//   children,\r\n//   ...restProps\r\n// }) => {\r\n//   const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n//   return (\r\n//     <td {...restProps}>\r\n//       {editing ? (\r\n//         <Form.Item\r\n//           name={dataIndex}\r\n//           style={{\r\n//             margin: 0,\r\n//           }}\r\n//           rules={[\r\n//             {\r\n//               required: true,\r\n//               message: `Please Input ${title}!`,\r\n//             },\r\n//           ]}\r\n//         >\r\n//           {inputNode}\r\n//         </Form.Item>\r\n//       ) : (\r\n//         children\r\n//       )}\r\n//     </td>\r\n//   );\r\n// };\r\n// const EditTable = () => {\r\n//   const [form] = Form.useForm();\r\n//   const [data, setData] = useState(originData);\r\n//   const [editingKey, setEditingKey] = useState('');\r\n//   const isEditing = (record) => record.key === editingKey;\r\n//   const edit = (record) => {\r\n//     form.setFieldsValue({\r\n//       name: '',\r\n//       age: '',\r\n//       address: '',\r\n//       ...record,\r\n//     });\r\n//     setEditingKey(record.key);\r\n//   };\r\n//   const cancel = () => {\r\n//     setEditingKey('');\r\n//   };\r\n//   const save = async (key) => {\r\n//     try {\r\n//       const row = await form.validateFields();\r\n//       const newData = [...data];\r\n//       const index = newData.findIndex((item) => key === item.key);\r\n//       if (index > -1) {\r\n//         const item = newData[index];\r\n//         newData.splice(index, 1, {\r\n//           ...item,\r\n//           ...row,\r\n//         });\r\n//         setData(newData);\r\n//         setEditingKey('');\r\n//       } else {\r\n//         newData.push(row);\r\n//         setData(newData);\r\n//         setEditingKey('');\r\n//       }\r\n//     } catch (errInfo) {\r\n//       console.log('Validate Failed:', errInfo);\r\n//     }\r\n//   };\r\n//   const columns = [\r\n//     {\r\n//       title: 'name',\r\n//       dataIndex: 'name',\r\n//       width: '25%',\r\n//       editable: true,\r\n//     },\r\n//     {\r\n//       title: 'age',\r\n//       dataIndex: 'age',\r\n//       width: '15%',\r\n//       editable: true,\r\n//     },\r\n//     {\r\n//       title: 'address',\r\n//       dataIndex: 'address',\r\n//       width: '40%',\r\n//       editable: true,\r\n//     },\r\n//     {\r\n//       title: 'operation',\r\n//       dataIndex: 'operation',\r\n//       render: (_, record) => {\r\n//         const editable = isEditing(record);\r\n//         return editable ? (\r\n//           <span>\r\n//             <Typography.Link\r\n//               onClick={() => save(record.key)}\r\n//               style={{\r\n//                 marginRight: 8,\r\n//               }}\r\n//             >\r\n//               Save\r\n//             </Typography.Link>\r\n//             <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n//               <a>Cancel</a>\r\n//             </Popconfirm>\r\n//           </span>\r\n//         ) : (\r\n//           <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>\r\n//             Edit\r\n//           </Typography.Link>\r\n//         );\r\n//       },\r\n//     },\r\n//   ];\r\n//   const mergedColumns = columns.map((col) => {\r\n//     if (!col.editable) {\r\n//       return col;\r\n//     }\r\n//     return {\r\n//       ...col,\r\n//       onCell: (record) => ({\r\n//         record,\r\n//         inputType: col.dataIndex === 'age' ? 'number' : 'text',\r\n//         dataIndex: col.dataIndex,\r\n//         title: col.title,\r\n//         editing: isEditing(record),\r\n//       }),\r\n//     };\r\n//   });\r\n//   return (\r\n//     <Form form={form} component={false}>\r\n//       <Table\r\n//         components={{\r\n//           body: {\r\n//             cell: EditableCell,\r\n//           },\r\n//         }}\r\n//         bordered\r\n//         dataSource={data}\r\n//         columns={mergedColumns}\r\n//         rowClassName=\"editable-row\"\r\n//         pagination={{\r\n//           onChange: cancel,\r\n//         }}\r\n//       />\r\n//     </Form>\r\n//   );\r\n// };\r\n// export default EditTable;"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}